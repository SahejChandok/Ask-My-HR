import { jsPDF } from 'jspdf';
import { PayrollResultData } from '../types';
import { formatDisplayDate } from './dateUtils';
import { formatCurrency } from './formatters';

export function generatePayslipPDF(
  result: PayrollResultData,
  periodStart: string,
  periodEnd: string
): Blob {
  const { employee, calculations } = result;
  const doc = new jsPDF();

  // Set document properties
  doc.setProperties({
    title: `Payslip - ${employee.first_name} ${employee.last_name}`,
    subject: `Pay Period: ${formatDisplayDate(periodStart)} - ${formatDisplayDate(periodEnd)}`,
    creator: 'Ask Your HR',
    author: 'Ask Your HR'
  });

  // Header
  doc.setFontSize(20);
  doc.text('PAYSLIP', doc.internal.pageSize.width / 2, 20, { align: 'center' });
  
  doc.setFontSize(12);
  doc.text(`Pay Period: ${formatDisplayDate(periodStart)} - ${formatDisplayDate(periodEnd)}`, 
    doc.internal.pageSize.width / 2, 30, { align: 'center' });

  // Employee Details
  doc.setFontSize(10);
  let y = 50;
  
  doc.text('Employee Details', 20, y);
  y += 10;
  doc.text(`Name: ${employee.first_name} ${employee.last_name}`, 30, y);
  y += 7;
  doc.text(`IRD Number: ${employee.ird_number}`, 30, y);
  y += 7;
  doc.text(`Tax Code: ${employee.tax_code}`, 30, y);
  y += 7;
  doc.text(`Employment Type: ${employee.employment_type === 'salary' ? 'Salaried' : 'Hourly'}`, 30, y);

  // Earnings
  y += 15;
  doc.text('Earnings', 20, y);
  y += 10;
  doc.text(`Gross Pay: ${formatCurrency(calculations.grossPay)}`, 30, y);

  // Deductions
  y += 15;
  doc.text('Deductions', 20, y);
  y += 10;
  doc.text(`PAYE Tax: ${formatCurrency(calculations.payeTax)}`, 30, y);
  y += 7;
  doc.text(`ACC Levy: ${formatCurrency(calculations.accLevy || 0)}`, 30, y);
  
  if (employee.kiwisaver_enrolled) {
    y += 7;
    doc.text(`KiwiSaver (${employee.kiwisaver_rate}%): ${formatCurrency(calculations.kiwiSaverDeduction)}`, 30, y);
  }

  // Net Pay
  y += 15;
  doc.setFontSize(12);
  doc.text('Net Pay:', 20, y);
  doc.text(formatCurrency(calculations.netPay), 150, y);

  // Footer
  doc.setFontSize(8);
  doc.text(
    `Generated by Ask Your HR on ${new Date().toLocaleString()}`,
    doc.internal.pageSize.width / 2,
    doc.internal.pageSize.height - 10,
    { align: 'center' }
  );

  return doc.output('blob');
}

export function generatePayslipCSV(
  result: PayrollResultData,
  periodStart: string,
  periodEnd: string
): string {
  const { employee, calculations } = result;
  
  const rows = [
    ['PAYSLIP'],
    ['Pay Period', `${formatDisplayDate(periodStart)} - ${formatDisplayDate(periodEnd)}`],
    [''],
    ['EMPLOYEE DETAILS'],
    ['Name', `${employee.first_name} ${employee.last_name}`],
    ['IRD Number', employee.ird_number],
    ['Tax Code', employee.tax_code],
    ['Employment Type', employee.employment_type === 'salary' ? 'Salaried' : 'Hourly'],
    ['KiwiSaver', employee.kiwisaver_enrolled ? `${employee.kiwisaver_rate}%` : 'Not Enrolled'],
    [''],
    ['EARNINGS', 'Amount'],
    ['Gross Pay', formatCurrency(calculations.grossPay)],
    [''],
    ['DEDUCTIONS', 'Amount'],
    ['PAYE Tax', formatCurrency(calculations.payeTax)],
    ['ACC Levy', formatCurrency(calculations.accLevy || 0)]
  ];

  if (employee.kiwisaver_enrolled) {
    rows.push([`KiwiSaver (${employee.kiwisaver_rate}%)`, formatCurrency(calculations.kiwiSaverDeduction)]);
  }

  rows.push(
    [''],
    ['NET PAY', formatCurrency(calculations.netPay)],
    [''],
    [`Generated by Ask Your HR on ${new Date().toLocaleString()}`]
  );

  return rows.map(row => row.join(',')).join('\n');
}